buildscript {
 
    ext {
        nexus = {
            credentials {
                username nexusBuildUserToken
                password nexusBuildPassToken
            }
            url nexusRepoURL
        }
    }

    repositories {
        maven(nexus)
        jcenter()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${dependencyVersionSpringBootGradlePlugin}")
        classpath("org.springframework:springloaded:${dependencyVersionSpringLoaded}")
        classpath("net.researchgate:gradle-release:${dependencyVersionGradleReleasePlugin}")
        classpath("org.owasp:dependency-check-gradle:${dependencyVersionGradleDependencyCheckPlugin}")
        classpath("com.github.jacobono:gradle-jaxb-plugin:${dependencyVersionJaxbPlugin}")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${dependencyVersionSonarqubePlugin}")
    }
}

repositories {
    maven(nexus)
    jcenter()
}

// IDE plugins
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

// Java dev plugins
apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'jdepend'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'

// code quality plugins
apply plugin: 'checkstyle'
apply plugin: 'org.sonarqube'

// release plugins
apply plugin: 'net.researchgate.release'

// dependency check plugin
apply plugin: 'org.owasp.dependencycheck'

// Jaxb generator tool. Only available on https://jcenter.bintray.com
apply plugin: 'com.github.jacobono.jaxb'

dependencyCheck {
    failBuildOnCVSS=11
    suppressionFile='config/dependencycheck/suppressions.xml'
}

// project artifact info
group = groupId
archivesBaseName = artifactId

// configure plugins

sonarqube {
    properties {
        property 'sonar.projectKey', "${group}:${archivesBaseName}"
        property 'sonar.projectName', "Microservice - ${archivesBaseName}"
        property 'sonar.projectVersion', version
        property "sonar.host.url", sonarHostURL
        property "sonar.jdbc.url", sonarJDBCURL
        property "sonar.jdbc.username", sonarJDBCUsername
        property "sonar.jdbc.password", sonarJDBCPassword
        property 'sonar.language', 'java'
        property 'sonar.jacoco.reportPath', "${buildDir}/jacoco/jacoco.exec"
        property 'sonar.exclusions', 'resources/**/*'
  }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: nexusReleaseURL) {
                authentication(userName: nexusBuildUserToken, password: nexusBuildPassToken);
            }
            snapshotRepository(url: nexusSnapshotURL) {
                authentication(userName: nexusBuildUserToken, password: nexusBuildPassToken);
            }
        }
    }
}

jacoco {
    toolVersion = "${dependencyVersionJacocoTool}"
    reportsDir = file("${buildDir}/jacocoReportDir")
}

test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }

    testLogging {
        events "passed", "skipped", "failed"
    }

    // functional test failed if "maxParallelForks" greater than 1
    maxParallelForks = 1
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

release {
    git {
        requireBranch = /master|integration.*/
        pushToCurrentBranch = true
    }
}

checkstyle {
  toolVersion = "6.0"
}

jaxb {
    xsdDir = "/src/main/resources/ebay/schema"
    episodesDir = "/src/main/resources/ebay/schema/generated"

    xjc {
        generatePackage = "com.ebay.model"
    }
}

compileJava {
    dependsOn xjc

    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

clean.doFirst {
    // delete generated files
    delete "${rootDir}/src/main/resources/ebay/schema/generated/"
    delete "${rootDir}/src/main/java/com/ebay/model/"
}

// only tag a release if the upload of the artefacts to Nexus was successful
afterReleaseBuild.dependsOn uploadArchives

// configure project specific properties/dependencies

sourceCompatibility = 1.8
targetCompatibility = 1.8

// Add a provided configuration.
// This is used to add jar dependencies that are needed for compile time only
// but should not be bundled in the war/ear projects.
//configurations { provided }
configurations {
    provided

    // Cause Jaxb throws: org.xml.sax.SAXNotRecognizedException: http://javax.xml.XMLConstants/feature/secure-processing
    all*.exclude group: 'xerces'
}

sourceSets.main.compileClasspath += [configurations.provided]
sourceSets.test.compileClasspath += [configurations.provided]
sourceSets.test.runtimeClasspath += [configurations.provided]

// optional: if using 'eclipse' plugin
eclipse.classpath.plusConfigurations += [configurations.provided]

dependencies {

    // Spring
    compile group: 'org.springframework.boot', name: 'spring-boot-starter', version :dependencyVersionSpringBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version :dependencyVersionSpringBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: dependencyVersionSpringBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-activemq', version: dependencyVersionSpringBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: dependencyVersionSpringBoot

    compile(group: 'org.springframework.cloud', name: 'spring-cloud-aws-autoconfigure', version: dependencyVersionSpringCloudAws) {
        exclude group: 'com.amazonaws'
    }

    compile(group: 'org.springframework.cloud', name: 'spring-cloud-aws-messaging', version: dependencyVersionSpringCloudAws) {
        exclude group: 'com.amazonaws'
    }

    compile group: 'org.springframework.batch', name:'spring-batch-core', version: dependencyVersionSpringBatch

    compile group: 'org.springframework.session', name:'spring-session', version: dependencyVersionSpringSession

    compile group: 'org.springframework.data', name: 'spring-data-redis', version: '1.8.1.RELEASE'

    // AWS
    compile group: 'com.amazonaws', name: 'aws-java-sdk-core', version: dependencyVersionAwsJavaSdk
    compile group: 'com.amazonaws', name: 'aws-java-sdk-sqs', version: dependencyVersionAwsJavaSdk
    compile group: 'com.amazonaws', name: 'aws-java-sdk-sns', version: dependencyVersionAwsJavaSdk
    compile group: 'com.amazonaws', name: 'aws-java-sdk-dynamodb', version: dependencyVersionAwsJavaSdk
    compile group: 'com.amazonaws', name: 'aws-java-sdk-cloudwatch', version: dependencyVersionAwsJavaSdk
    compile group: 'com.amazonaws', name: 'aws-java-sdk-kinesis', version: dependencyVersionAwsJavaSdk

    compile group: 'com.amazonaws', name: 'amazon-kinesis-client', version: dependencyVersionAmazonKinesisClient

    compile group: 'com.amazonaws', name: 'amazon-sqs-java-extended-client-lib', version: dependencyVersionAmazonSqsJavaExtendedClientLib

    // Google Guava
    compile group: 'com.google.guava', name: 'guava', version: dependencyVersionGuava

    // Apache ActiveMQ
    compile group: 'org.apache.activemq', name: 'activemq-broker'

    // Apache Commons
    compile group: 'org.apache.commons', name: 'commons-lang3', version: dependencyVersionApacheCommonsLang3
    compile group: 'org.apache.commons', name: 'commons-collections4', version: dependencyVersionApacheCommonsCollection4
    compile group: 'commons-io', name: 'commons-io', version: dependencyVersionCommonsIO

    // javaslang
    compile group: 'io.javaslang', name: 'javaslang', version: dependencyVersionJavaSlang

    // Redis client
    compile group: 'biz.paluch.redis', name: 'lettuce', version: dependencyVersionRedisLettuce

    // Findbugs
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: dependencyVersionFindbugs

    //
    compile group: 'net.sf.dozer', name: 'dozer', version: dependencyVersionDozer

    // Jaxb
    jaxb 'com.sun.xml.bind:jaxb-core:2.2.11'
    jaxb 'com.sun.xml.bind:jaxb-xjc:2.2.11'
    jaxb 'com.sun.xml.bind:jaxb-impl:2.2.11'

    jaxb 'javax.xml.bind:jaxb-api:2.2.12'

    // test dependencies
    testCompile("org.springframework.boot:spring-boot:${dependencyVersionSpringBoot}")
    testCompile("org.springframework.boot:spring-boot-autoconfigure:${dependencyVersionSpringBoot}")
    testCompile("org.springframework.boot:spring-boot-starter-web:${dependencyVersionSpringBoot}")

    testCompile("org.springframework.boot:spring-boot-starter-test:${dependencyVersionSpringBoot}")

    testCompile("com.jayway.jsonpath:json-path:${dependencyVersionJaywayJsonpath}")
    testCompile("com.jayway.jsonpath:json-path-assert:${dependencyVersionJaywayJsonpath}")
    testCompile("com.jayway.restassured:rest-assured:${dependencyVersionJaywayRestassured}")
    testCompile("com.jayway.restassured:json-path:${dependencyVersionJaywayRestassured}")
    testCompile("com.jayway.restassured:spring-mock-mvc:${dependencyVersionJaywayRestassured}")

    testCompile("javax.servlet:javax.servlet-api:${dependencyVersionServletApi}")

    testCompile("org.apache.httpcomponents:httpclient:${dependencyVersionHttpClient}")

    testCompile("org.hamcrest:hamcrest-library:${dependencyVersionHamcrestLibrary}")

    testCompile("com.jcabi:jcabi-matchers:${dependencyVersionJcabiMarchers}")

    testCompile("org.mock-server:mockserver-netty:${dependencyVersionMockServerNetty}")
}
